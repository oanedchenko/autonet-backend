// Code generated by go-swagger; DO NOT EDIT.

package department

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDepartmentsHandlerFunc turns a function with the right signature into a get departments handler
type GetDepartmentsHandlerFunc func(GetDepartmentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDepartmentsHandlerFunc) Handle(params GetDepartmentsParams) middleware.Responder {
	return fn(params)
}

// GetDepartmentsHandler interface for that can handle valid get departments params
type GetDepartmentsHandler interface {
	Handle(GetDepartmentsParams) middleware.Responder
}

// NewGetDepartments creates a new http.Handler for the get departments operation
func NewGetDepartments(ctx *middleware.Context, handler GetDepartmentsHandler) *GetDepartments {
	return &GetDepartments{Context: ctx, Handler: handler}
}

/*GetDepartments swagger:route GET /departmant department getDepartments

Search for all departmants

*/
type GetDepartments struct {
	Context *middleware.Context
	Handler GetDepartmentsHandler
}

func (o *GetDepartments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDepartmentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
